#!/bin/bash
set -e

# Set local vars
extensions_dir="$PHP_INI_DIR/extensions"
php_ini="$PHP_INI_DIR/php.ini"

usage() {
    echo "usage: $0 repository-name [repository-name ...]"
    echo "   ie: $0 mongofill/mongofill-hhvm dstelter/hhvm-pgsql"
    echo
}

url_exist() {
    local httpCode="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' ${1})"

    if [ "$httpCode" -ge 200 -a "$httpCode" -lt 400 ]; then
        echo "true"
    else
        echo "false"
    fi
}

# Create a build file if does not exist
create_build_file() {
    if [ -e "build.sh" ]; then
        return 0
    fi

    echo "hphpize && cmake . && make" > build.sh \
        && chmod +x build.sh
}

# Get the "extension.so" and store it in $extensions_dir
store_extension() {
    # Get file by extension
    local filename="$(basename $(find ./ -regex '.*so'))"
    
    mv $filename $extensions_dir

    # Enable extension
    echo "hhvm.dynamic_extensions[${filename%.so}] = $filename" >> $php_ini
}

install() {
    git clone ${1} /tmp/hhvm-extension \
        && cd /tmp/hhvm-extension \
        && create_build_file \
        && ./build.sh \
        && store_extension \
        && rm -rf $(pwd) \
        && cd -
}

# Install hhvm extension from github and its dependencies
buildDeps="git-core curl"
apt-get update && apt-get install -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/*

repositories=()
while [ $# -gt 0 ]; do
    repositoryName="$1"
    shift

    if [ -z "$repositoryName" ]; then
        continue
    fi

    repository="https://github.com/$repositoryName.git"
    
    if [ "$(url_exist ${repository})" != "true" ]; then
        echo >&2 "error: $repository does not exist"
        echo >&2
        usage >&2
        exit 1
    fi

    repositories+=( "$repository" )
done

if [ "${#repositories[@]}" -eq 0 ]; then
    usage >&2
    exit 1
fi

# Create configuration files and add settings
mkdir -p $extensions_dir
echo "hhvm.dynamic_extension_path = \"$extensions_dir\"" >> $php_ini

# Install every repository
for repository in "${repositories[@]}"; do
    install $repository
done

# Clean
apt-get purge --auto-remove -y $buildDeps
